#!/bin/bash
# Compile scrip for dynlib
#
# 0. User-editable configuration 

# Define compile mode:
#   Possible values: "productive" or "debug". 
#   The debug mode includes array boundary checks, warnings for floating point exceptions
#   and helpful error messages in case of such errors, but slows down execution considerably.
COMPILE_OPTS="productive"

# Choose python version to compile for
PY_VER=""
F2PY="f2py$PY_VER"
PYTHON="python$PY_VER"

#######################################################################
# Obs: The order of the files in $files has to reflect the interdepencies!
base=`pwd`
baselib="$base/lib"
src="$baselib/fortran"
precc="$src/.precc"
work="$base/examples"

doc="$base/doc"
doc_extract=".compile_fortran_doc.py"

files="config.f90 derivatives.f90 interpol.f90 ellipse.f90 utils.f90 thermodyn.f90 diag.f90 detect_rwb_contour.f90 detect_lines.f90 detect.f90 sphere.f90 stat.f90 tend.f90 diag_tend.f90"
filec="const.f90"
filek="kind.f90"

python_library="dynfor"
fortran_library="libdynfor"
pysig="${precc}/$python_library.pyf"

host=`hostname -f`
uname=`uname`
if [ ${host: -6} == 'uib.no' ]; then
	LIBS="-L/Data/gfi/users/local/lib -lspherepack -lopenblas -lscalapack"
	RPATH="" #-Wl,-rpath,/Data/gfi/users/local/lib"
elif [ "$uname" == 'Darwin' ]; then
	LIBS='-L/usr/lib -L/usr/local/lib -lspherepack -lblas -llapack'
	RPATH=""
else
	echo "Error: Unknown host/ operating system."
	exit 1
fi

# TODO: Make code ready for -pedantic
if [ "$COMPILE_OPTS" == 'productive' ]; then
	OPTS="-fPIC -O2 -fno-range-check"
	F2PY_OPTS=""
	flagset="\e[0;32mproductive\e[0m";
elif [ "$COMPILE_OPTS" == 'debug' ]; then
	OPTS="-fPIC -fcheck=all -ffpe-trap=invalid,zero,overflow -fbacktrace -g -fno-range-check"
	F2PY_OPTS="--debug-capi --debug"
	flagset="\e[0;31mdebug\e[0m";
else
	echo "Configuration error: COMPILE_OPTS must be one of ('productive', 'debug')"
	exit 1
fi

# Empty precompiler directory
mkdir -p $precc
rm -rf ${precc}/*

# Anticipate compiled object file names
fileso=""
for file in $files
	do fileso="$fileso ${file%.*}.o"
done
fileco="${filec%.*}.o"
fileko="${filek%.*}.o"


# 1. Simple sed precompiler
echo "Stage 1: Precompiling the Fortran code"

cd $src

# Marker one of the source files have been changes since last commit
[[ `git diff $files $filec $filek |  wc -l` > 0 ]] && { change=+; } || { change=; };
VERSION=`git describe --tags --abbrev=0`
VERREVI=`git describe --tags`$change
VERDATE=`git log --format="%ai" --no-walk $VERSION`

sed -e "s/####VERREVI####/$VERREVI/g" $filec |
sed -e "s/####VERDATE####/$VERDATE/g" | 
sed -e "s/####FCOMPIL####/f2py version `$F2PY -v`/g" | 
sed -e "s/####FCOMTIM####/`date +'%Y-%m-%d %H:%M:%S %z'`/g" |
sed -e "s/####FCOMHOS####/`hostname -f`/g" > $precc/$filec
cp $filek $files $precc


# 2. Creating new python signature file
echo "Stage 2: Creating python signature file"

cd $precc

$F2PY -m $python_library -h $pysig $filec $files > /dev/null
sed "s/kind=nc/kind=16/g" $pysig | sed "s/_nc//g" |
sed "s/kind=nr/kind=8/g" | sed "s/_nr//g" |
sed "s/kind=ni/kind=4/g" | sed "s/_ni//g" |
grep -v "nan=" > ${pysig}_tmp
mv ${pysig}_tmp $pysig

# 3. Compiling the fortran modules 
echo -e "Stage 3: Compiling Fortran shared object using $flagset options."
gfortran $OPTS $LIBS -c $filek $filec $files 
gfortran -shared $RPATH $fileko $fileco $fileso $OPTS $LIBS -o $fortran_library.so 
mv $fortran_library.so $baselib


# 4. Compiling the shared object usable from within python
echo -e "Stage 4: Compiling the python module using $flagset options."
LDFLAGS="$RPATH -shared" $F2PY -c $LIBS --fcompiler=gnu95 $F2PY_OPTS --opt="\"$OPTS\"" $pysig $files $filec $filek > /dev/null
mv ${python_library}*.so $baselib


# 5. Compiling Fortran documentation
echo "Stage 5: Compiling the pickled Fortran documentation"
cd $src
$PYTHON $baselib/$doc_extract $filek $filec $files


# 6. Compiling Fortran documentation
echo "Stage 6: Generating the common documentation"
cd $doc
make clean &> /dev/null
PYTHONPATH="$doc:$PYTHONPATH" make html &> /dev/null



echo "Done compiling dynlib version $VERREVI"

#
