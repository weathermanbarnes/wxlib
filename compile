#!/bin/bash
# Compile scrip for dynlib

# Obs: The order of the files in $files has to reflect the interdepencies!
cur=`pwd`
src="$cur/src"
precc="$src/precc"
work="$cur/default"

files="config.f95 conv.f95 diag_contour_rwb.f95 diag.f95 stat.f95"
filec="const.f95"
filek="kind.f95"

filew="settings.py example_ani.py example_diag.py example_netcdf_write.py example_stat.py"
filem=".dynlib_workdir_prepared"

pysig="${precc}/dynlib.pyf"

# Angus' fflags: -O3 -g -fcray-pointer -fno-second-underscore -Dlinux  -ffixed-line-length-132 -fdefault-real-8 -Dgfortran -fno-align-commons -fconvert=little-endian -D_LARGEFILE64_SOURCE -fPIC
#fflags='-fno-align-commons -fconvert=little-endian -D_LARGEFILE64_SOURCE -fPIC'
# Angus' libraries and includes: -I/usr/include -lnetcdf -lnetcdff -lhdf5 -lhdf5_hl -llapack -lblas
# --f90flags="-O3 -g -fcray-pointer -fno-second-underscore -Dlinux  -ffixed-line-length-132 -fdefault-real-8 -Dgfortran -fno-align-commons -fconvert=little-endian -D_LARGEFILE64_SOURCE -fPIC" -I/usr/include -lnetcdf -lnetcdff -lhdf5 -lhdf5_hl -llapack -lblas

# Empty precompiler directory
rm -rf ${precc}/*


# 1. Simple sed precompiler
echo "Stage 1: Precompiling the Fortran code"

cd $src

# Marker one of the source files have been changes since last commit
[[ `git diff $files $filec $filek |  wc -l` > 0 ]] && { change=+; } || { change=; };
VERSION=`git describe --tags --abbrev=0`
VERREVI=`git describe --tags`$change
VERDATE=`git log --format="%ai" --no-walk $VERSION`

sed -e "s/####VERREVI####/$VERREVI/g" $filec |
sed -e "s/####VERDATE####/$VERDATE/g" | 
sed -e "s/####FCOMPIL####/f2py version `f2py -v`/g" | 
sed -e "s/####FCOMTIM####/`date +'%Y-%m-%d %H:%M:%S %z'`/g" |
sed -e "s/####FCOMHOS####/`hostname -f`/g" > $precc/$filec
cp $filek $files $precc


# 2. Creating new python signature file
echo "Stage 2: Creating python signature file"

cd $precc

f2py -m dynlib -h $pysig $filec $files > /dev/null
sed "s/kind=nr/kind=8/g" $pysig | sed "s/kind=ni/kind=4/g" > ${pysig}_tmp
mv ${pysig}_tmp $pysig


# 3. Compiling the fortran modules 
echo "Stage 3: Creating Fortran *.mod files"
gfortran -c $filek $filec $files 


# 4. Compiling the shared object usable from within python
echo "Stage 4: Compiling the python module (as a shared object)"
f2py -c --fcompiler=gnu95  dynlib.pyf $files $filec $filek > /dev/null
mv dynlib.so $cur
cd $cur/..


if [ -f $filem ];
then
	echo "Stage 5: skipped [`pwd` already prepared]"
else
	echo "Stage 5: Preparing the work directory [`pwd`]"
	touch $filem
	# TODO: do the actual preparations
fi


echo "Done compiling dynlib version $VERREVI"

#
